{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bf3f227f-0a2d-410b-8c0a-93b516cd1d04",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the important packages\n",
    "\n",
    "import numpy as np\n",
    "from astropy.io import fits\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9fcc6ea3-f85f-4200-9a92-1c1ca6120a16",
   "metadata": {},
   "outputs": [],
   "source": [
    "# This function sorts the files according to their MJDs (time of observation in MJD)\n",
    "\n",
    "def sort_exposure(data_files):\n",
    "    \n",
    "    MJD = []\n",
    "\n",
    "    for file_name in data_files:\n",
    "        hdu = fits.open(file_name)\n",
    "        MJD.append(hdu[0].header['MJD-OBS'])\n",
    "\n",
    "    MJD = np.array(MJD)\n",
    "    sorting = np.argsort(MJD)\n",
    "    MJD = MJD[sorting]\n",
    "    \n",
    "    # print(MJD[sorting])\n",
    "\n",
    "    return sorting, MJD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "72c11660-b971-4bce-bb30-cc934b1c6276",
   "metadata": {},
   "outputs": [],
   "source": [
    "# It reads the data files from the input directory\n",
    "\n",
    "def read_hdus(input_data_directory, target_name):\n",
    "\n",
    "    # I have only chosen files which were observed in the NIR Fibre-A \n",
    "    data_files = [os.path.join(input_data_directory, x) for x in os.listdir(input_data_directory) if x.endswith('-sci-desj-nir_A.fits')]\n",
    "    \n",
    "    data_files = np.array(data_files)\n",
    "    \n",
    "    sort, MJD = sort_exposure(data_files)\n",
    "    \n",
    "    data_files_sorted = data_files[sort]\n",
    "    \n",
    "    # print(data_files_sorted)\n",
    "    \n",
    "    hdus = []\n",
    "    \n",
    "    for file_name in data_files_sorted:\n",
    "        \n",
    "        hdu = fits.open(file_name)\n",
    "\n",
    "        if hdu[0].header['OBJECT'] == target_name:\n",
    "            hdus.append(hdu)\n",
    "\n",
    "            print(file_name)\n",
    "\n",
    "   \n",
    "    # data_files_sorted = data_files[time_sorted_exposures_mask]\n",
    "\n",
    "    return hdus, MJD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a9504491-894b-4cb0-a6ca-602065a36a96",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "V1298/20231210/car-20231210T19h18m01s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T19h34m14s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T19h46m26s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T19h58m39s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T20h10m51s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T20h23m16s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T20h36m26s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T20h47m16s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T21h00m31s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T21h11m21s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T21h24m39s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T21h35m29s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T21h48m33s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T21h59m22s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T22h12m43s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T22h23m32s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T22h35m38s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T22h46m29s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T22h58m25s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T23h09m16s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T23h21m30s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T23h32m20s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T23h44m28s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231210T23h55m19s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231211T00h07m30s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231211T00h18m21s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231211T00h31m16s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231211T00h42m06s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231211T00h56m47s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231211T01h07m38s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231211T01h20m37s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231211T01h31m28s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231211T01h44m03s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231211T01h56m28s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231211T02h08m27s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231211T02h21m22s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231211T02h33m29s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231211T02h45m28s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231211T02h57m59s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231211T03h10m25s-sci-desj-nir_A.fits\n",
      "V1298/20231210/car-20231211T03h22m56s-sci-desj-nir_A.fits\n"
     ]
    }
   ],
   "source": [
    "# Here you just define the input data directory\n",
    "\n",
    "input_data_directory = 'V1298/20231210'\n",
    "\n",
    "# In case your directory has data of other targets as well, you have to define the target name from the FITS file to separate from the rest\n",
    "target_name = 'V1298Tau' \n",
    "\n",
    "data_files, MJD = read_hdus(input_data_directory = input_data_directory, target_name = target_name)\n",
    "\n",
    "# data_files = np.array(data_files)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "650d90fc-80ab-4ace-b3eb-fad589451fef",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Molecfit is not able to read CARMENES data as it is as the file format is not supported by it. Hence, we convert our input file into the FITS BINTABLE form\n",
    "\n",
    "# It is also observed that Molecfit crashes if we use data of multiple spectral orders together, hence, for efficiency reasons, we make the FITS BINTABLE file of only one spectra order\n",
    "order = 5\n",
    "\n",
    "for file in data_files:\n",
    "    \n",
    "    hdul_orig = file\n",
    "\n",
    "    # date = hdul_orig[0].header['DATE-OBS']\n",
    "\n",
    "    # print(date)\n",
    "    \n",
    "    SPEC = hdul_orig[1].data[order]\n",
    "    WAVE = hdul_orig[4].data[order]\n",
    "    ERRS = hdul_orig[3].data[order]\n",
    "    \n",
    "    header_orig = (hdul_orig[0].header)\n",
    "    date = hdul_orig[0].header['DATE-OBS']\n",
    "    mjd = str(hdul_orig[0].header['MJD-OBS'])\n",
    "    empty_primary = fits.PrimaryHDU(header = header_orig)\n",
    "    empty_primary.header['INSTRUME'] = 'ANY'\n",
    "    empty_primary.header['HIERARCH ESO PRO CATG'] = 'SCIENCE'\n",
    "    empty_primary.header['OBJECT'] = 'V1298T'\n",
    "    \n",
    "    col1 = fits.Column(name = 'wavelength', format = '1D', array = WAVE)\n",
    "    col2 = fits.Column(name = 'flux', format = '1D', array = SPEC)\n",
    "    col3 = fits.Column(name = 'err_flux', format = '1D', array = ERRS)\n",
    "    \n",
    "    hdu = fits.BinTableHDU.from_columns([col1, col2, col3])\n",
    "    hdul = fits.HDUList([empty_primary, hdu])\n",
    "\n",
    "    # print(hdul[0].header)\n",
    "    data_orig = hdul[1].data\n",
    "\n",
    "    # Save your new input file into the desired Molecfit input data directory\n",
    "    hdul.writeto('data_dir/reflex_input/molecfit/molecfit/raw/ANY/' + date + '.fits') "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
